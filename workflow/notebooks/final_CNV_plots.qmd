---
title: "CNV plots"
author: "AG"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    toc_float: true
    theme: cyborg
    embed-resources: true
    code-fold: true
    code-summary: "show code"
    df-print: kable
    cap-location: top
---

## Data

```{r, message=FALSE}
library(purrr)
library(readr)
library(dplyr)
library(stringr)
library(ggplot2)

config <- yaml::read_yaml("../../configs/config.yaml")
samples <- unlist(config$samples)

read_many_tables <- function(table_name) {
  out_df <- map_dfr(samples, function(x) {
    df <-
      read_tsv(paste0("../../results/tables/", x, "/", table_name),
               show_col_types = F)
    df$sample <- x
    return(df)
  }) %>%
    mutate(replicate = str_split_i(sample, "_", i = 2),
           group = str_split_i(sample, "_", i = 3))
  
  return(out_df)
}

res_df <- read_many_tables("blaSHV_counts.tsv")

# this table is ready if the pipeline finished
freq_df <- read_tsv("../../results/tables/aggregate/frequencies_full_table.tsv")
```


```{r}
#| tbl-cap: "N reads per sample"

knitr::kable(freq_df)
```


```{r, fig.width=10, fig.height=6}
res_df %>% 
  group_by(sample) %>% 
  count() %>% 
  ggplot(aes(reorder(sample, -n), n)) +
  geom_col(fill="steelblue") +
  ggtitle("Reads per sample") +
  ylab("n reads") +
  xlab("") +
  theme_bw() +
  theme(axis.text.x = element_text(size=10, angle=45, hjust = 1))
```


## CNV frequency plots

### MH + selection

```{r, fig.height=8, warning=FALSE}
freq_df %>%
  filter(grepl("x", group) | grepl("mh", group)) %>% 
  ggplot(aes(CN, freq_corrected)) +
  geom_col(aes(fill=group)) +
  geom_rug(sides = "b", length = unit(0.06, "npc")) +
  scale_x_continuous(breaks = c(0:19)) +
  facet_grid(rows = vars(group)) +
  xlab("copy number") +
  ylab("log10 adjusted frequency") +
  theme_bw() +
  theme(legend.position = "none")
```


### Reversion

```{r,fig.height=8, warning=FALSE}
freq_df %>%
  filter(grepl("g", group)) %>% 
  mutate(group = ordered(group, levels = c("10g", "20g", "40g", "80g", "160g"))) %>% 
  ggplot(aes(CN, freq_corrected)) +
  geom_col(aes(fill=group)) +
  geom_rug(sides = "b", length = unit(0.06, "npc")) +
  scale_x_continuous(breaks = c(0:17)) +
  facet_grid(rows = vars(group)) +
  xlab("copy number") +
  ylab("log10 adjusted frequency") +
  theme_bw() +
  theme(legend.position = "none")
```

### With detection limit line

```{r,fig.height=8}
freq_df %>%
  filter(group == "mh") %>% 
  #mutate(group = ordered(group, levels = c("10g", "20g", "40g", "80g", "160g"))) %>% 
  #filter(CN < 4, CN != 0) %>% 
  ggplot(aes(CN, 6+log10(freq_corrected))) +
  geom_col() +
  geom_line(aes(CN, 6+log10(detection_limit)), color = "red", linewidth=5)
```

### CN change across groups

```{r, fig.height=10, fig.width=5}
plot_change_across_groups <- function(fdf, X, selection = TRUE) {
  # fdfd: frequency df
  # X: CN of interest
  if (selection) {
    fdf %>%
      filter(grepl("x", group) | grepl("mh", group), CN == X) %>%
      ggplot(aes(group, freq_corrected)) +
      geom_col(fill = "#87A96B") +
      theme_bw() +
      ggtitle(paste0("Selection, CN = ", X)) +
      xlab("") +
      ylab("corrected frequency")
  } else {
    fdf %>%
      filter(grepl("g", group), CN == X) %>%
      mutate(group = ordered(group, levels = c("10g", "20g", "40g", "80g", "160g"))) %>%
      ggplot(aes(group, freq_corrected)) +
      geom_col(fill = "#B1676D") +
      theme_bw() +
      ggtitle(paste0("No selection, CN = ", X)) +
      xlab("") +
      ylab("corrected frequency")
  }
}

reversion_plots <-
  map(c(1, 2, 3, 4, 5, 6, 7, 8, 9),
      ~ plot_change_across_groups(freq_df, ., selection = FALSE))

ggpubr::ggarrange(plotlist = reversion_plots, ncol = 2, nrow = 5)
```

```{r, fig.height=10, fig.width=5}
selection_plots <-
  map(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
      ~ plot_change_across_groups(freq_df, ., selection = TRUE))

ggpubr::ggarrange(plotlist = selection_plots, ncol = 2, nrow = 5)
```


## Average blaSHV

to compare with ddPCR

$$M_{gene} = \frac{\sum_{i=0}^n CN_{i}\frac{reads\_counts_{i}}{reads\_possible_{i}}}{\sum_{i=0}^n\frac{reads\_counts_{i}}{reads\_possible_{i}}}$$

```{r}
freq_df %>%
  group_by(group) %>%
  mutate(avg_gene_count = sum(CN * (counts_obs / freq_theoretical)) / sum((counts_obs /
                                                                             freq_theoretical))) %>%
  select(group, avg_gene_count) %>% 
  distinct() %>% 
  knitr::kable()
```

## Aberrant reads

Reads that contain *blaSHV* hits outside the flanking regions.

Here I will count them and plot the results.

Such reads will be excluded from the analysis.

```{r}
# this code was developed in analysis_notebook_5.qmd
# for each sample you have to read two tables with filtered blaSHV hits and filtered RR+RU+GR reads

# function to show if (gene) coords are within (FR) range
is_between <- function(bla_start, bla_end, fr_start, fr_end) {
    # this is direct strand
    if (fr_start < fr_end) {
      # check if both ends of the gene are inside the FR coords
      if (between(bla_start, fr_start, fr_end) &
          between(bla_end, fr_start, fr_end)) {
        return(TRUE)
      } else {
        return(FALSE)
      }
    # this is reverse strand
    } else {
      # check the same condition but with FR ends swapped
      if (between(bla_start, fr_end, fr_start) &
          between(bla_end, fr_end, fr_start)) {
        return(TRUE)
      } else {
        return(FALSE)
      }
    }
  }

# solution that can be applied to the full table
genes_within_flanks <- function(read_id, fr_df, bla_df) {
  fr_bla_df <- fr_df %>%
    filter(subject == read_id) %>%
    # this will copy values of FR coords across rows
    left_join(bla_df, by = "subject") %>%
    # drop na in .y -> no bla hits in this read
    drop_na(start.subject.y) %>% 
    # BLA columns are prefixed by .y
    # start.subject.x and end.subject.x are the same across all rows now
    select(
      subject,
      start.subject.x,
      end.subject.x,
      end.red,
      start.subject.y,
      end.subject.y,
      orientation
    )
  
  # FR coords are always the first elements of the end.red, end.subject.x columns
  answer <- any(
    !map2_lgl(
      fr_bla_df$start.subject.y,
      fr_bla_df$end.subject.y,
      ~ is_between(.x, .y, fr_bla_df$end.red[1], fr_bla_df$end.subject.x[1])
    )
  )
  
  return(answer)
}

# get the actual count of aberrant reads
count_aberrant_reads <- function(fr_ru_df, bla_df) {
  sum(map_vec(fr_ru_df$subject, ~ genes_within_flanks(., fr_ru_df, bla_df)))
}

# function that ties everything together
main <- function(sample, prefix = "../../results/tables/") {
  fr_ru_path <- paste0(prefix, sample, "/blast_joined.tsv")
  bla_path <- paste0(prefix, sample, "/blast_blaSHV_filtered.tsv")
  fr_df <- read_delim(fr_ru_path, show_col_types = F)
  bla_df <- read_delim(bla_path, show_col_types = F)
  n_abb <- count_aberrant_reads(fr_df, bla_df)
  n_tot <- nrow(fr_df)
  
  out_df <- tibble("sample" = sample, "n_aberrant" = n_abb, "n_total" = n_tot)
  return(out_df)
}

# samples
sample_names <- read_delim("../../configs/samples.txt", delim = ",")

aberrant_reads_df <- map_dfr(sample_names$samples, ~ main(.))

```

```{r}
aberrant_reads_df <- 
  aberrant_reads_df %>% 
  mutate("perc_aberrant" = (n_aberrant/n_total)*100) %>% 
  arrange(-perc_aberrant)

aberrant_reads_df
```

```{r}
write_delim(aberrant_reads_df, "../../results/tables/aberrant_reads.tsv", delim = "\t")
```

## Differences of different counting approaches

$$D=mod(N_{bla1} -N_{bla2})$$ 

where *Nbla1* is the number of bla hits as calculated by blasting bla (+merging bed files) and *Nbla2* - the number of bla genes as calculated by the formula:

>Size for “n” copy numbers of the amplified unit: CNn = 4299 + (3450 x (n-1)) nucleotides

In other words:

n = ((dFR - 4299)/3450) + 1

where dFR is distance between flanking regions

The idea is that this two ways should give results differing by 15%

### Tables

data on distances between FR come from the rule `filter_flanking_regions`

#### Min/max difference based on the formula above

```{r}
# samples
sample_names <- read_delim("../../configs/samples.txt", delim = ",")

# go through the samples
range_dist <- function(sample_name){
  # this FR table contains distance between FRs
  fr_ru_filt <- read_delim(paste0("../../results/tables/", sample_name, "/blast_joined.tsv"), show_col_types = F, progress= F)
  # this one contains bla counts via merging BED coords
  bla_counts <- read_delim(paste0("../../results/tables/", sample_name, "/blaSHV_counts.tsv"), show_col_types = F, progress = F)
  # now count distance
  diff_per_read <- fr_ru_filt %>% 
    select(subject, distance.btw.FR) %>% 
    left_join(bla_counts, by="subject") %>% 
    mutate("n.bla.exp" = ((distance.btw.FR-4299)/3450)+1,
           "n.bla.blast" = n.blaSHV.merged,
           "difference" = round(n.bla.exp - n.blaSHV.merged))
  # compile output
  out_dist <- tibble("sample" = sample_name,
                     "min.diff" = min(diff_per_read$difference, na.rm = TRUE),
                     "max.diff" = max(diff_per_read$difference, na.rm = TRUE))
  return(out_dist)
}

diff_bla_counts <- map_dfr(sample_names$samples, ~ range_dist(.x))

write_delim(diff_bla_counts, "../../results/tables/min_max_diff_bla_counts.tsv", delim = "\t")
```

```{r}
diff_bla_counts |> arrange(min.diff)
```

#### Percentage

What about percentage of each difference type in the total number of selected reads in every sample?

```{r}
# I need full table of count differences for each read in a sample
full_dist <- function(sample_name){
  # this FR table contains distance between FRs
  fr_ru_filt <- read_delim(paste0("../../results/tables/", sample_name, "/blast_joined.tsv"), show_col_types = F, progress= F)
  # this one contains bla counts via merging BED coords
  bla_counts <- read_delim(paste0("../../results/tables/", sample_name, "/blaSHV_counts.tsv"), show_col_types = F, progress = F)
  # now count distance
  diff_per_read <- fr_ru_filt %>% 
    select(subject, distance.btw.FR) %>% 
    left_join(bla_counts, by="subject") %>% 
    mutate("sample" = sample_name,
           "n.blaSHV.exp" = ((distance.btw.FR-4299)/3450)+1,
           "difference" = round(n.blaSHV.exp - n.blaSHV.merged)) %>% 
    select(-c(n.blaSHV.exp, distance.btw.FR)) %>% 
    na.omit()
    
  return(diff_per_read)
}

# let's get the full tables of difference per each read
# list will be required later for plots
full_dist_list <- map(sample_names$samples, ~ full_dist(.x))

# function to find percentage of reads with each type of difference
diff_percent <- function(df){
  df %>% 
    group_by(difference) %>%
    count() %>% 
    mutate("sample" = df$sample[[1]],
           "perc" = (n/nrow(df)*100),)
}

# list of tables for each sample
diff_perc_list <- map(full_dist_list, ~ diff_percent(.x))

# save the table
diff_perc_table <- bind_rows(diff_perc_list)
write_delim(diff_perc_table, "../../results/tables/full_perc_diff.tsv", delim = "\t")
```


Save the full table of differences

```{r}
full_dist_table <- bind_rows(full_dist_list)

write_delim(full_dist_table, "../../results/tables/full_diff_bla_counts.tsv", delim = "\t")
```

What is the type of difference inc each sample that is contained in the most reads

```{r}
# function to get diff and max perc
max_perc <- function(df){
  ungroup(df) %>% 
  filter(perc == max(perc))
}

max_percentages <- map_dfr(diff_perc_list, ~ max_perc(.))

write_delim(max_percentages, "../../results/tables/max_prec_diff.tsv", delim = "\t")

max_percentages
```
